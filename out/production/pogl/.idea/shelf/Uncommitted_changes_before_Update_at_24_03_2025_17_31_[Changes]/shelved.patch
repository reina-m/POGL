Index: Modele2.java
===================================================================
diff --git a/Modele2.java b/Modele2.java
deleted file mode 100644
--- a/Modele2.java	(revision cd84174878b37e8bb90008a043d67184d3bd378a)
+++ /dev/null	(revision cd84174878b37e8bb90008a043d67184d3bd378a)
@@ -1,4 +0,0 @@
-public class Modele2 {
-
-    //new file
-}
Index: Vues.java
===================================================================
diff --git a/Vues.java b/Vues.java
deleted file mode 100644
--- a/Vues.java	(revision cd84174878b37e8bb90008a043d67184d3bd378a)
+++ /dev/null	(revision cd84174878b37e8bb90008a043d67184d3bd378a)
@@ -1,49 +0,0 @@
-import javax.swing.*;
-import java.awt.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.ArrayList;
-import Modele.*
-package Vues;
-
-class CVue {
-    private JFrame frame;
-    private VueIle ile;
-    private VueCommandes commandes;
-
-    /** Construction d'une vue attachée à un modèle. */
-    public CVue(Ile ile) {
-        /** Définition de la fenêtre principale. */
-        frame = new JFrame();
-        frame.setTitle("L'île interdite");
-        frame.setLayout(new FlowLayout());
-
-        /** Définition des deux vues et ajout à la fenêtre. A COMPLETER
-         * grille = new VueGrille(modele);
-         * frame.add(grille);
-         * commandes = new VueCommandes(modele);
-         * frame.add(commandes);
-         */
-
-        /**
-         *  - Ajustement de la taille de la fenêtre en fonction du contenu.
-         *  - Indiquer qu'on quitte l'application si la fenêtre est fermée.
-         *  - Préciser que la fenêtre doit bien apparaître à l'écran.
-         */
-        frame.pack();
-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-        frame.setVisible(true);
-    }
-}
-
-class VueIle extends JPanel implements Observer {
-    private Ile ile;
-    /*POUR MÉHTHODES ET FONCTIONS : VOIR VUE GRILLE DANS CONWAY*/
-    }
-}
-
-class VueCommandes extends JPanel {
-    private Ile ile ;
-}
-
-/*A RAJOUTER (?) DES VUES DE ZONES , SELON LES DIFFÉRENTES ZONES, VUE DES JOEURS*/
\ No newline at end of file
Index: Controlleur.java
===================================================================
diff --git a/Controlleur.java b/Controlleur.java
deleted file mode 100644
--- a/Controlleur.java	(revision cd84174878b37e8bb90008a043d67184d3bd378a)
+++ /dev/null	(revision cd84174878b37e8bb90008a043d67184d3bd378a)
@@ -1,18 +0,0 @@
-import javax.swing.*;
-import java.awt.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.ArrayList;
-
-import Modele.*;
-import Vues.*
-
-package Controleur;
-
-class Controleur implements ActionListener {
-    Ile ile;
-    public Controleur(Ile ile) {this.ile = ile;}
-    public void actionPerformed(ActionEvent e) {
-        /*À COMPLÉTER PLUS TARD*/
-    }
-}
\ No newline at end of file
Index: Modele.java
===================================================================
diff --git a/Modele.java b/Modele.java
deleted file mode 100644
--- a/Modele.java	(revision cd84174878b37e8bb90008a043d67184d3bd378a)
+++ /dev/null	(revision cd84174878b37e8bb90008a043d67184d3bd378a)
@@ -1,90 +0,0 @@
-import javax.swing.*;
-import java.awt.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.ArrayList;
-
-package Modele;
-/**
- * Interface des objets observateurs.
- */
-interface Observer {
-    public void update();
-}
-
-/**
- * Classe des objets pouvant être observés.
- */
-abstract class Observable {
-
-    private ArrayList<Observer> observers;
-    public Observable() {
-        this.observers = new ArrayList<Observer>();
-    }
-    public void addObserver(Observer o) {
-        observers.add(o);
-    }
-    public void notifyObservers() {
-        for(Observer o : observers) {
-            o.update();
-        }
-    }
-}
-
-class Ile extends Observable {
-    /*ATTRIBUTS : A RAJOUTER*/
-    public Ile {
-        /*A COMPLETER*/
-    }
-    /*METHODES : A COMPLETER
-    * EXEMPLE : GET ZONE */
-}
-
-enum Etat {
-    /**
-     * État d'une zone : submergée, innondée, ou normale
-     */
-    SUB, INN, NORM
-}
-
-/**
- * Zones
- */
-class Zone {
-    private Ile ile;
-    protected Etat etat;
-    private final int x, y; // ses coordonées dans l'île (une grille (?))
-
-    public Zone(...) {
-        ...
-        /*CONSTRUCTEUR À COMPLÉTER*/
-    }
-
-    /*GETTERS + SETTERS (?)*/
-    public Etat getEtat() {return etat;}
-    public int getX() {return x;}
-    public int getY() {return y;}
-    public void assecher() {this.etat = Etat.NORM;}
-    public void innonder() {this.etat = Etat.INN;}
-}
-
-class Heliport extends Zone {
-    // un héliport ne peut pas être innondé
-}
-
-enum Element {
-    /**
-     * Element d'une zone elementaire
-     */
-    AIR, EAU, TERRE, FEU
-}
-
-class ZoneElementaire extends Zone {
-    private Element element;
-    private boolean artefact; // ???
-    public ZoneElementaire(Element element) {
-        this.element = element;
-    }
-    public Element getElement() {return element;}
-    public boolean contientARtefact() {return artefact;}
-}
\ No newline at end of file
